{"ast":null,"code":"var _jsxFileName = \"/Users/kevingarcia/CodeTyke-Add-Loader-to-Submit-Button-/CodeTyke-772053a1b4f597099cc35a6a33bbbdd9bf78111b/src/components/learningModule/LearningModule.js\";\nimport React from 'react';\nimport SelectionBox from '../selectionBox/SelectionBox';\nimport Button from '../button/Button';\nimport ProgressBar from '../progressBar/ProgressBar';\nimport './Styles.scss';\n\nconst LearningModule = ({\n  setGameStatus\n}) => {\n  const [currentQuestionId, setCurrentQuestionId] = React.useState(0);\n  const [quizData, setQuizData] = React.useState({});\n  const [showLoader, setShowLoader] = React.useState(false);\n  let currentQuestion = quizData.questionArr ? quizData.questionArr[currentQuestionId] : {};\n  React.useEffect(() => {\n    getQuizData();\n  }, []);\n\n  const getQuizData = () => {\n    fetch(\"http://localhost:8080/problems\").then(res => {\n      return res.json();\n    }).then(data => {\n      setQuizData(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleSubmit = () => {\n    if (currentQuestionId < quizData.totalQuestions - 1) {\n      setShowLoader(true);\n      setCurrentQuestionId(currentQuestionId + 1); // setShowLoader(false)\n    } else {\n      setCurrentQuestionId(0);\n      setGameStatus({\n        message: \"Great Job! Play again.\",\n        loadIntro: true\n      });\n    }\n  };\n\n  let possibleAnswers = [];\n\n  if (currentQuestion.possibleAnswers) {\n    possibleAnswers = currentQuestion.possibleAnswers.map((answer, index) => {\n      return /*#__PURE__*/React.createElement(SelectionBox, {\n        id: index,\n        key: index,\n        answer: answer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 14\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, currentQuestion.title && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProgressBar, {\n    totalQuestions: quizData.totalQuestions,\n    id: currentQuestion.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, currentQuestion.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--subHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, currentQuestion.additionalInfo)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--answerArea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--selections\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, possibleAnswers), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"learningModule--submitButtonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Submit\",\n    handleSubmit: handleSubmit,\n    showLoader: showLoader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default LearningModule;","map":{"version":3,"sources":["/Users/kevingarcia/CodeTyke-Add-Loader-to-Submit-Button-/CodeTyke-772053a1b4f597099cc35a6a33bbbdd9bf78111b/src/components/learningModule/LearningModule.js"],"names":["React","SelectionBox","Button","ProgressBar","LearningModule","setGameStatus","currentQuestionId","setCurrentQuestionId","useState","quizData","setQuizData","showLoader","setShowLoader","currentQuestion","questionArr","useEffect","getQuizData","fetch","then","res","json","data","catch","err","console","log","handleSubmit","totalQuestions","message","loadIntro","possibleAnswers","map","answer","index","title","id","additionalInfo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SelectionBox from '../selectionBox/SelectionBox';\nimport Button from '../button/Button';\nimport ProgressBar from '../progressBar/ProgressBar';\n\nimport './Styles.scss';\n\nconst LearningModule = ({setGameStatus}) => {\n  const [currentQuestionId, setCurrentQuestionId] = React.useState(0);\n  const [quizData, setQuizData] = React.useState({});\n  const [showLoader, setShowLoader] = React.useState(false);\n  let currentQuestion = quizData.questionArr ? quizData.questionArr[currentQuestionId]: {};\n  React.useEffect(()=>{\n    getQuizData();\n  },[]);\n\n  const getQuizData=()=>{\n    fetch(\"http://localhost:8080/problems\")\n      .then((res)=>{\n        return res.json();\n      }).then((data)=>{\n        setQuizData(data);\n      }).catch((err)=>{\n        console.log(err);\n      });\n  }\n\n  const handleSubmit=()=> {\n    if(currentQuestionId < quizData.totalQuestions-1){\n      setShowLoader(true)\n      setCurrentQuestionId(currentQuestionId+1);\n      // setShowLoader(false)\n    } else {\n      setCurrentQuestionId(0);\n      setGameStatus({message: \"Great Job! Play again.\", loadIntro: true});\n    }\n  }\n  let possibleAnswers = [];\n  if(currentQuestion.possibleAnswers){\n    possibleAnswers = currentQuestion.possibleAnswers.map((answer, index) => {\n      return <SelectionBox id={index} key={index} answer={answer} />\n    })\n  }\n\n\n  return (\n    <div className=\"learningModule\">\n      { currentQuestion.title &&\n        <>\n          <ProgressBar totalQuestions={quizData.totalQuestions} id={currentQuestion.id} />\n          <div className=\"learningModule--header\">\n            <div className=\"learningModule--title\">\n              { currentQuestion.title }\n            </div>\n            <div className=\"learningModule--subHeader\">\n              { currentQuestion.additionalInfo }\n            </div>\n          </div>\n\n          <div className=\"learningModule--answerArea\">\n            <div className=\"learningModule--selections\">\n              { possibleAnswers }\n            </div>\n            <div className=\"learningModule--submitButtonContainer\">\n              <Button label=\"Submit\" handleSubmit={ handleSubmit } showLoader={ showLoader } />\n            </div>\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n\nexport default LearningModule;\n"]},"metadata":{},"sourceType":"module"}